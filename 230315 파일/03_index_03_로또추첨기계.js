// 로또 추첨기 만들어보자 



// 로또 추첨 기계 
    // 로또 번호들이 들어갈 로또 박스 
let lottoNum = [];
    // 로또 추첨된거 

let res = [];


// 로또 조건 
    // 1. 로또에는 겹치는 숫자가 없어야 함
    // 2. 숫자가 6개 
    // 3. 나온 숫자들의 결과를 보여주자

    

// 로또 번호 모두 뽑고 가져다 사용하는 곳
    // 1~45번 까지 반복시키자
for (i = 1; i <= 45; i++) {
    // 1 ~ 45번 까지의 숫자를 배열에 담아주고 
    lottoNum.push(i);

}
    // [팁]
        // 잘 만들어졌는지 하나씩 체크 하면서 만들어야 한다. ⭐⭐⭐⭐⭐ 
console.log(lottoNum);



// 추첨하는 곳 
for (let i= 0; i < 6; i++) {
    let rndIndex = Math.floor(Math.random() * lottoNum.length);
        // 랜덤값 0.3 뽑아 -> 이걸 길이만큼 곱해(45) -> 하나의 값이 나와 -> 이걸 하나의 index 로 저장

    // 랜덤으로 뽑은 인덱스를 -> lottoNum 배열에 인덱스로 전달 -> number 라는 변수에 담기 (사용하기 위해 담은 것)
    let number = lottoNum[rndIndex];
        // 랜덤으로 뽑은 인덱스를 활용해서, lottoNum 에서 하나의 값을 찍어

    // 랜덤값이 또 나오지 않게 하기 위해서, 해당 배열에서, 해당 값을 제거 
        // lottoNum 에서 number 제거 하려면? 
        // 배열 메소드의 splice 사용 
    lottoNum.splice(rndIndex, 1);
        // [해석]
            // 해당 인덱스에 해당하는 값 하나만 제거할거야
            // 나중에 이 값이 뽑이지 않을 것. 
            // 배열의 길이도 줄었을 것 
            // 해당배열에서 값이 제거되면 -> 길이가 줄어들고 -> 랜덤값을 구하는 과정에서도 lottoNum.length 길이가 준다 -> so,정상작동
        // [lottoNum.splice해석]
            // 시작점 인덱스, 그 시작점으로부터 몇개를 제거할 것 인지. 를 매개변수로 전달


    // 결과값을 담아주자
    res.push(number);
    
}

    // 함수로 정리하기 

        // 추첨 전, 셋팅작업 = 박스에 공 넣기 
        function lottoInit(){

            // 배열에 값을 추가할 때는 '초기화' 를 해야 함 
                // ⭐⭐⭐⭐⭐⭐             
                // 그렇지 않으면, 전역변수 이기 때문에 오류날 가능성
            lottoNum = [];

            // 로또 번호 모두 뽑고 가져다 사용하는 곳
            // 1~45번 까지 반복시키자
            for (i = 1; i <= 45; i++) {
            // 1 ~ 45번 까지의 숫자를 배열에 담아주고 
            lottoNum.push(i);

            }
            // [팁]
            // 잘 만들어졌는지 하나씩 체크 하면서 만들어야 한다. ⭐⭐⭐⭐⭐ 
            console.log("init 함수 실행, lotto 셋팅 끝" + lottoNum);
        }


        // 로또 추첨 실행 함수 
        function lottoPlay() {

            // 배열에 값을 추가할 때는 '초기화' 를 해야 함 
              // ⭐⭐⭐⭐⭐⭐ 
              // 그렇지 않으면, 전역변수 이기 때문에 오류날 가능성
                // 이걸 안 하면, 독립된 로또가 나옴 
            res = [];
            
            
            // 추첨하는 곳 
                for (let i= 0; i < 6; i++) {
                    let rndIndex = Math.floor(Math.random() * lottoNum.length);
                        // 랜덤값 0.3 뽑아 -> 이걸 길이만큼 곱해(45) -> 하나의 값이 나와 -> 이걸 하나의 index 로 저장

                    // 랜덤으로 뽑은 인덱스를 -> lottoNum 배열에 인덱스로 전달 -> number 라는 변수에 담기 (사용하기 위해 담은 것)
                    let number = lottoNum[rndIndex];
                        // 랜덤으로 뽑은 인덱스를 활용해서, lottoNum 에서 하나의 값을 찍어

                    // 랜덤값이 또 나오지 않게 하기 위해서, 해당 배열에서, 해당 값을 제거 
                        // lottoNum 에서 number 제거 하려면? 
                        // 배열 메소드의 splice 사용 
                    lottoNum.splice(rndIndex, 1);
                        // [해석]
                            // 해당 인덱스에 해당하는 값 하나만 제거할거야
                            // 나중에 이 값이 뽑이지 않을 것. 
                            // 배열의 길이도 줄었을 것 
                            // 해당배열에서 값이 제거되면 -> 길이가 줄어들고 -> 랜덤값을 구하는 과정에서도 lottoNum.length 길이가 준다 -> so,정상작동
                        // [lottoNum.splice해석]
                            // 시작점 인덱스, 그 시작점으로부터 몇개를 제거할 것 인지. 를 매개변수로 전달


                    // 결과값을 담아주자
                    res.push(number);
                    
                }

            }




// 기능을 나누고 하나로 묶음 
function main() {

    // 로또셋팅 하고 
    lottoInit();

    // 로또 추첨  
    lottoPlay();

    console.log("로또 결과는?" + res);
}
    // 단위별(함수초기화, play등)로 기능을 정리했을 때, 단위 테스트가 가능! 
        // 1) 각 세분화된 버스 테스트 가능
            // 버그가 있는지, 없는지 테스트 해볼 수 있음! ⭐⭐⭐⭐⭐ 
            // 단위 테스트 하고 -> 그 다음 '통합 테스트' 하면 됨 ⭐⭐⭐⭐⭐ 
        // 2) 재사용성 높일 수 있음. 
            // main 하나만 쓰면 된다. 
            // 전체기능이 있는 함수를 만들고, 함수가 실행될 때 마다, 해당 기능이 동작할 수 있게, 재사용성, 높일 수 있음. 
            //버튼 누르면 -> 계속 그게 나오게 하는거, 그러면, 버튼 실행 반복이 가능 
        // 3) 이렇게 통합으로 작업해주는 작업을 꼭 해줘야 함. ⭐⭐⭐⭐⭐ 

        
main();
main();
main();


        

    // 봅힌거 제거!!!!! ✅ 

    // [해석]
        // math.floor() 는 값의 소수점 단위를 '버림'✅
            // ex) 5.7 을 math.floor 에 넣으면 -> 5 로 만들어준다. 

        // lottoNum.length 을 넣어서 45개의 랜덤값이 뜨게 
            // 0~44 랜덤 숫자를 뽑고, 인덱스로 사용해야 겠다.

        // let rndIndex = Math.floor(Math.random() * lottoNum.length
            // 배열의 길이를 써서, 인덱스로 사용 