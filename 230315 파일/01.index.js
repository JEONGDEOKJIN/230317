// 🟦 배열심화 

// 의의
    // 리스트 형태 
    // 배열 [1,2,3,4,5] 
    // 레퍼런스 타입 📛📛📛📛📛 

// 특징 
    // 인덱스의 '순서' 로 해당 '값에 접근' 할 수 있다. 
    // 우리는 1 부터 숫자를 세는데, 배열은 0부터 숫자를 센다. 
    // 인덱스는 0 부터 배열의 크기 까지~ 

// 특징 - 비교 
    // 다른 언어에서 C, C++, C# 등 에서는 배열이 LIST 타입이 있음 
    // 자바스크립트에서는 Arr 타입이 있는데, 
    // 사용자가 편하게 접근하게 하기 위해서 조금 허술한 부분이 있음. ✅ 
    // 자바스크립트 배열은 '객체' ⭐⭐⭐⭐⭐ 
        // key 값이 0,1,2, 일 뿐. 
        // 따라서, 자바스크립트 배열은 '객체 배열' 이다. ⭐⭐⭐⭐⭐ 
        // 다른 배열은 이중 배열인 경우 
            // int a = [0][1]
        // 이걸 자바스크립트는 어떻게 표현? 
            let a = [[1,2,3], [4,5,6], [7,8,9]]
            // 0번째 배열은 [1,2,3] 배열
            // 1번째 배열은 [4,5,6] 배열
            console.log(a[0]); // [1,2,3] 배열이 뜬다.
            console.log(a[0][0]) // [1,2,3] 배열 안에 있는 - 0번째 인덱스 : 1가 뜬다. 
            console.log(a[0][1]) // 1,2,3] 배열 안에 있는 - 1번째 인덱스 : 2가 뜬다. 
            console.log(a[0][2]) // 3가 뜬다. 

            console.log(a[1])   // [4,5,6] 배열이 나온다.
            console.log(a[1][1])    // [4,5,6] 중 1번째 인덱스 - 5가 나온다. 

            console.log(a[2][0]) // [7,8,9] 배열이 나온다. - 중 0번째 인덱스 - 7이 나온다. 

// 🟦 '이중배열' 이란
    // 위에처럼 '배열 안에 배열이 있는 것' 을 ⭐'이중배열'⭐ 이라고 한다. ⭐⭐⭐⭐⭐ 
    // 삼중배열까지 가능하지만, 보통, 이중배열 까지만 사용한다. 
    // 이렇게 하면, for 문을 2개 돌리게 된다. ⭐⭐⭐⭐⭐⭐ 

// 🟦 '배열' 에는 lenght 라는 '키값' 이 있다.
    // 배열의 총 길이를 알려준다.
    console.log(a.length); // 3이 뜬다. 
    
    // 배열의 인덱스 접근할 때 : 0 부터 '배열의 길이 -1' 
        // 길이 : 1,2,3
        // 인덱스 : 0,1,2 
        // 즉, 인덱스는 0 부터 시작하기 때문에, '끝값' 에 접근하려면, '길이' 와 '인덱스' 를 맵핑해보면, '길이의 -1' 을 하게 된다. ⭐⭐⭐⭐⭐


// 🟦 배열의 길이만큼 반복해보기 ⭐⭐⭐ 
    // 숫자로 반복 비교를 하게 되는 경우 (하드코딩하는 경우)

        // 1. 반복문의 반복횟수를 동적으로 변경하기 힘듦. 
        let b = [1,2,3,4,5,6,7];
        for (let i = 0; i < 7; i++) {
            // 적용되는 인덱스인 i 는 0,1,2,3,4,5,6
            console.log(b[i])
            // 콘솔값은 1,2,3,4,5,6,7 이 뜬다. 
        }
            // [문제상황]
                // 이때, b 에 8 이 추가된다면? ⭐⭐⭐
                // 마지막 값을 가져올 수 없음. / 일일이 추가해줘야 함. 
            // [해결책]
                // b.length 로 적어두면 -> 배열에 데이터가 추가 되어도, 하드코딩 하지 않고, 대처 가능 ⭐⭐⭐ 
                
                b.push(8);
                b.push(9);
                    // 아! 이건 함수구나 
                    // '배열 메소드' 임 
                    // ⭐⭐'배열 타입의 함수' ⭐⭐⭐
                    // 배열에서 사용할 수 있는 함수

                    // 근데, '.' 이 붙었어. 
                    // 함수도 값임. -> 값이니까 . 으로 접근 -> . 접근은 객체 ⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐ (밑에서 객체 다시 보기) 


                for (let i = 0; i < array.length; i++) {
                    console.log(b[i]);

                // }
                // 이렇게 하면, ⭐⭐여전히 목표로 하는⭐⭐ '배열의 길이 만큼 다 돌리기' 를 할 수 있다. ⭐⭐ 
            // [시사점]
                // 데이터만 넣으면 -> 하드코딩 하지 않고, 원하는 결과가 나오게 




// 🟦 객체 복습 
// 객체 생긴거 다시 보자
    // 문제의식 
    // b.push(9); 여기에서 왜 b 가 붙나요? ⭐⭐⭐⭐⭐⭐ 

    // 객체에는 키와 값이 있다. 
    // 값을 가져오려면, key 값으로 접근해서 가져온다. 

    const obj = {

        a : "나는 객체야",

        // 익명함수 ⭐⭐⭐⭐⭐ 
            // 이름이 없는 함수!!!!! 
            // 매개변수도 들어가
        push : function(num) {

            console.log("나는 객체(obj) 안에 있는, push 라는 key 값에 있는, 함수야");
            console.log(num + "를 매개변수로 받았어~");

        }
    }
        // [해석] 
            // const : 한번 선언하면 값변경 불가 / 변수 재선언 불가 / 상수의 값
            // a 는 키값임 
            // a 가 담고 있는 값에 접근하려면, . 을 쓴다. ⭐⭐⭐⭐⭐⭐⭐⭐

    // 찍어보기
    console.log(obj.a);

    // 매개변수 전달
        // 객체 안에 함수를 넣고, 사용가능 ⭐⭐⭐⭐⭐ 
    obj.push(2);




// 🟦 배열심화 계속 - (배열 메소드)

    // '배열의 인덱스에 따른 값' 을 구할 수 있는 함수 (indexOf)
        // return 변수명 금지
        // 예제
            let d = [1,2,3,4,5];
            let return_2 = d.indexOf(2)
                // [해석]
                    // 2 라는 값이 갖고 있는 인덱스를 알려줘~ ⭐⭐⭐ 
            let return_3 = d.indexOf(3)
                // [해석]
                    // 3 라는 값이 갖고 있는 인덱스를 알려줘~ ⭐⭐⭐ 
            console.log(return_2);

        // 특징 
            // '해당 값' 을 찾아서 '위치(인덱스)' 를 리턴.
            // ex) 3 이라는 값이, '몇 번째 인덱스' 인지를 리턴. ⭐⭐⭐⭐⭐ 
            // 값을 input 하면 -> 해당 index 를 리턴 ⭐⭐⭐ 

        // 예제 
            let arr = ["사과", "딸기", "포도"];
            // 딸기의 인덱스를 알고 싶어
            let index_return = arr.indexOf("딸기");
            console.log(index_return)



    // 배열 메소드 find 
        // 특징 
            // 검색할 때 사용할 함수 
            // 함수 반환값이 true 나오는 함수를 넣어준다. 

            let return4 = arr.find(function(i){
                console.log("item" + item);

                // true 가 나오게 하는 부분
                    // i 가 사과면 -> true 가 된다. 
                    // true 가 나오면 -> 해당 아이템이 return 된다. ⭐⭐⭐⭐⭐
                return i === "사과" //                
                return true // true 가 나온 첫 번째 값을 반환함. 
                return === "딸기"; // 값이 나오면, 함수는 종료. 그 다음으로 가지 않음 ⭐⭐⭐ 
            });
                // [해석]
                    // 익명함수를 매개변수로 받는다. 
                    // arr 배열의 값이 '순서' 대로 들어오고, 이 '순서' 는 i 매개변수에 들어온다.
            
            console.log(return4)    // return 이 없으면 -> return4 자체에 담긴건 없음 ⭐⭐⭐ 


        // 특징 
            // 1. true 가 나와야 반환 
            // 2. true 만 넣으면, 해당 값이 있는 것의 첫 번째 만 
            // 3. 값 나오면, 그 자리에서 종료 

            


    // ✅ 배열 메소드 findIndex 
            // 예시

            let return5 = arr.findIndex(function(item) {
                return item === "딸기";
            })

            console.log(return5);

            // [해석]
                // 해당 배열을 반복시키면서, 1) 값을 찾고, 2) 그 값의 인덱스를 반환 ⭐⭐⭐




    // 배열 메소드 filter ⭐⭐ 
            // 특징 
                // 매개변수로 익명함수를 전달✅✅

            // 예시 
            let arr2 = ['이사과', '김딸기', '이포도']

            let str = '가나다';
            console.log(str[0]); // 찍으면 '가' 가 나옴
            console.log(str[1]); // 찍으면 '나' 가 나옴
            // '문자열 하나하나' 도 '인덱스'로 접근이 가능 ⭐⭐⭐⭐⭐ 


            let return6 = arr2.filter(function(item){
                return item[0] === "이" 
                // 나온 첫번째 아이템에서 이 를 찾는다. ❓❓❓❓❓ 
                // item 에서 0 은? 첫 번째 0 을 가져오는 건가? 
            })

            console.log(return6);
            // [해석]
                // item 에서 '이' 를 갖고 있는 걸 표현
                // 원하는 값을 모두 찾아서 반환

            // 쓰임 
                // 검색창 알고리즘 구현할 때 




    // 함수 메소드 map 
    let return7 = arr2.map(function(item){
        console.log(item);
        // return item;

        return item[0] === "이" ;

    })
    console.log(return7);
    // [해석]
        // 배열을 길이만큼 반복해 
        // 반환값을 배열의 형태로 리턴 ❓❓❓ 
        // true 라는 값이 나오면 -> 배열의 첫 번째에 담는다. 배열의 길이만큼 채워서 반환. ❓❓❓
    
    

    // 배열 메소드 forEach 

        // 특징 
            // 해당 배열을 반복해서 작업해야할 경우, 용이하게 사용 

        // 방법1
        for (let index = 0; index < array.length; index++) {
            
            console.log(arr2[i]);
                // [해석] 증가하는 값인 i를 배열의 인덱스로 줘서 -> 값을 확인 

        }


        // 방법2
        arr2.forEach(function(item){
            console.log(item)

        });
            // 배열을 길이만큼 반복하면서, '값을 바로 사용할 수 있음' ✅✅ 
            // item 을 순차적으로 뽑아준다. 
            // 배열 인덱스 전달해서 값 확인하는 거랑 동일 ⭐⭐⭐ 
            // 어떤거랑 동일한건지를 알면, 이해가 될거 같음 ⭐⭐⭐ 





    // 배열 메소드 - join
        // join 함수는 매개변수로 문자열을 전달 해준다. 
    console.log(arr.join("!"));
        // [해석] 
            // '배열' 을 '문자열' 로 변경해준다. ⭐⭐⭐ 
            // 각 배열값을 구분할 때, " " 안에 있는 문자로 구분해줌 ⭐⭐ 
                // 여기에서는 ! 로 구분 
                // " " 안 쓰면 -> 다 붙는다. 
                // ex) ! , / 같은 것




    // split 함수 
        // 메소드랑 차이❓❓❓❓❓❓❓❓❓❓❓❓❓❓
        // 문자열을 배열로 변경 ⭐⭐⭐ 
        
        let str3 = arr2.join(",");
        console.log(str3.split(','));
            // [해석]
                // 매개변수로, 문자열 값을 자를 문자값을 넣어주면 된다. 
                // 문자열을 -> 배열로 나눌 때, 어떤 걸 기준으로 자를거야? 를 넣어준다. 
                // ex) , 를 매개변수로 전달하면 -> , 를 잘라서, 각각 배열의 형태로 변경시킨다. 


