// 객체 안에 다가 함수를 정의해보기 

// 1. 객체 안, 일반 함수, 
    // 정의
    let arr = {

        map : function() {
            console.log("객체 안에 생성된, 일반 함수")
        }

    }

    // 실행
    arr.map()


// 2. 객체 안, 콜백 함수, 
    // 2.1 정의
    let arr2 = {

        map : function(callBack) {
            console.log(callBack.length);
        }
    }
    // 2.2 실행

        // 2.2.1 매개변수로 함수라는 자료형을 쓸 때, 일반함수가 들어가는 경우 
        function temp2(v, b, c) {
            console.log("나는 콜백함수야!", v + "를 받았어",  b + "도 같이 받았어!", c)
        }

        arr2.map(temp2)



        // 2.2.2 매개변수로 무명함수가 들어가는 경우
            // 이거는 선언되면서, 동시에 실행되는 건가❓❓❓❓❓ 
        arr2.map(function(a,b) {
            console.log("나는 콜백 함수야! 전달받은 매개변수는"  + a + b + "이거야" )   
                 // w지금 이건 , 문자열이 됨. 형변환이 됨. 
            console.log("나는 콜백 함수야! 전달받은 매개변수는",  + a + b , "이거야" )    
                // w지금 이건 숫자열이 됨 = 파란색!, 콤마를 찍었음 = 타입까지 유지돔 ⭐⭐⭐⭐⭐⭐⭐⭐ 
    
        });
        
        
// 🤟 WIL 
// 1. callBack 이라고 쓰면, 보통 이 변수가 담고 있는 자료형은 '함수' 라는 관용적인 표현. 
// true 같이 어떤 예약된 기능이 있지 않음. 

// -----------------------------------------------------------------------


// 1. 함수를 정의할 때, 매개변수로 함수가 온다고 정의해줌. 
        // 함수를 정의할 수 있는 방법은 1) 일반함수 2) 객체 안에 있는 함수

// 2. 정의한 걸, 실행해봐. 
        //  실행할 때 들어올 수 있는 콜백함수로 
            // 1) 일반함수 2) 무명함수 3) 객체 안에 있는 함수? 

